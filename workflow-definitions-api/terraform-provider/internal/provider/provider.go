package provider

import (
	"context"
	sdk "epilot-workflows-definition/internal/sdk"
	shared "epilot-workflows-definition/internal/sdk/pkg/models/shared"
	datasource "github.com/hashicorp/terraform-plugin-framework/datasource"
	provider "github.com/hashicorp/terraform-plugin-framework/provider"
	schema "github.com/hashicorp/terraform-plugin-framework/provider/schema"
	resource "github.com/hashicorp/terraform-plugin-framework/resource"
	types "github.com/hashicorp/terraform-plugin-framework/types"
)

// This file is generated by speakeasy-terraform-generator. DO NOT EDIT.

// Ensure epilotWorkflowsDefinitionProvider satisfies various provider interfaces

var _ provider.Provider = &epilotWorkflowsDefinitionProvider{}

type epilotWorkflowsDefinitionProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing
	version string
}

// epilotWorkflowsDefinitionProviderModel describes the provider data model.
type epilotWorkflowsDefinitionProviderModel struct {
	Authorization types.String `tfsdk:"authorization"`
}

// Metadata returns the provider type name.
func (p *epilotWorkflowsDefinitionProvider) Metadata(_ context.Context, _ provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "epilot-workflows-definition"
	resp.Version = p.version
}

// Schema defines the provider-level schema for configuration data.
func (p *epilotWorkflowsDefinitionProvider) Schema(_ context.Context, _ provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{"authorization": schema.StringAttribute{Optional: true}}}
}
func (p *epilotWorkflowsDefinitionProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data epilotWorkflowsDefinitionProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	Authorization := data.Authorization.ValueString()
	opts := []sdk.SDKOption{sdk.WithSecurity(shared.Security{BearerAuth: &shared.SchemeBearerAuth{Authorization: Authorization}})}
	client := sdk.New(opts...)
	resp.DataSourceData = client
	resp.ResourceData = client
}
func (p *epilotWorkflowsDefinitionProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{NewWorkflowDefinitionResource}
}
func (p *epilotWorkflowsDefinitionProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{}
}
func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &epilotWorkflowsDefinitionProvider{version: version}
	}
}
