package provider

import (
	"context"
	sdk "epilot-workflows-definition/sdk"
	shared "epilot-workflows-definition/sdk/pkg/models/shared"
	"errors"
	diag "github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	schema "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

// This file is generated by speakeasy-terraform-generator. DO NOT EDIT.
func Provider() *schema.Provider {
	return &schema.Provider{
		Schema: map[string]*schema.Schema{"authorization": &schema.Schema{
			Type:        schema.TypeString,
			Required:    true,
			DefaultFunc: schema.EnvDefaultFunc("EPILOT-WORKFLOWS-DEFINITION_AUTHORIZATION", nil)}},
		ResourcesMap: map[string]*schema.Resource{
			"epilot_workflows_definition_workflow_definition": (resourceWorkflowDefinition())},
		DataSourcesMap: map[string]*schema.Resource{
			"epilot_workflows_definition_workflow_definition": (resourceWorkflowDefinition())},
		ConfigureContextFunc: providerConfigure}
}
func providerConfigure(ctx context.Context, d *schema.ResourceData) (interface{}, diag.Diagnostics) {
	Authorization, ok := d.Get("authorization").(string)
	if !ok {
		return nil, diag.FromErr(errors.New("failed to get Authorization"))
	}
	opts := []sdk.SDKOption{sdk.WithSecurity(shared.Security{BearerAuth: &shared.SchemeBearerAuth{Authorization: Authorization}})}
	c := sdk.New(opts...)
	return c, nil
}
